
" ------ arch section ------

" The Arch Linux global vimrc - setting only a few sane defaults
"
" DO NOT EDIT THIS FILE. IT'S OVERWRITTEN UPON UPGRADES.
"
" Use /etc/vimrc for system-wide and $HOME/.vimrc for personal configuration
" (for details see ':help initialization').
"
" Use :help '<option>' to see the documentation for the given option.

" Use Vim defaults instead of 100% vi compatibility
" Avoid side-effects when nocompatible has already been set.
if &compatible
  set nocompatible
endif

set backspace=indent,eol,start
set ruler
set suffixes+=.aux,.bbl,.blg,.brf,.cb,.dvi,.idx,.ilg,.ind,.inx,.jpg,.log,.out,.png,.toc
set suffixes-=.h
set suffixes-=.obj

" Move temporary files to a secure location to protect against CVE-2017-1000382
if exists('$XDG_CACHE_HOME')
  let &g:directory=$XDG_CACHE_HOME
else
  let &g:directory=$HOME . '/.cache'
endif
let &g:undodir=&g:directory . '/vim/undo//'
let &g:backupdir=&g:directory . '/vim/backup//'
let &g:directory.='/vim/swap//'
" Create directories if they doesn't exist
if ! isdirectory(expand(&g:directory))
  silent! call mkdir(expand(&g:directory), 'p', 0700)
endif
if ! isdirectory(expand(&g:backupdir))
  silent! call mkdir(expand(&g:backupdir), 'p', 0700)
endif
if ! isdirectory(expand(&g:undodir))
  silent! call mkdir(expand(&g:undodir), 'p', 0700)
endif

" Make shift-insert work like in Xterm
if has('gui_running')
  map <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>
endif


" ------ my things kinda ------

" plug.vim (code from tips page)
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" ------ complex things ------
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py' }
" <Leader>T to use, <Leader> is \ by default (warum wei√ü ich nicht)
Plug 'wincent/Command-T', {
    \   'do': 'cd ruby/command-t/ext/command-t && ruby extconf.rb && make'
    \ }
Plug 'dense-analysis/ale'

" Markdown
Plug 'plasticboy/vim-markdown'
Plug 'JamshedVesuna/vim-markdown-preview'

" ------ commands ------
Plug 'tpope/vim-repeat'
" use gc to comment/uncomment
Plug 'tpope/vim-commentary'
" use cp to copy and cv to paste
Plug 'christoomey/vim-system-copy'
" use gs to sort
Plug 'christoomey/vim-sort-motion'

" ------ text objects ------
" (s)urrounding (object/motion/command)
Plug 'tpope/vim-surround'
" (l)ine, (e)ntire buffer
" Plug 'kana/vim-textobj-line'
" Plug 'kana/vim-textobj-entire'
" (they stopped working)

" ------ cosmetics ------
Plug 'dylanaraps/wal.vim'

" ------ LaTeX ------
Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' }
let g:livepreview_previewer = 'zathura'
" only necessary for specific files...
" let g:livepreview_engine = 'pdflatex ' " . ' -shell-escape -interaction nonstopmode'

call plug#end()

" Markdown plugin specifics
" set conceallevel=2 " if you wanna see ugly previews of formulas
let g:vim_markdown_math = 1

let vim_markdown_preview_toggle=2

" TODO: modify as you like
colorscheme wal

let g:airline_powerline_fonts = 1

" ------ NERDTree ------

" NERDTree on ctrl+n
let NERDTreeShowHidden=1
map <silent> <C-n> :NERDTreeToggle<CR>
map <leader>nf :NERDTreeFind<CR>

" close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen=1

" hide certain obnoxious folders
let NERDTreeIgnore = ['^node_modules$', '^__pycache__$']


" ------ misc ------
" musc {{{

" autocmd BufWrite *.md :! pandoc % -o /tmp/thing.pdf
command PDF :!pandoc %:t -o /tmp/thing.pdf

" lets you do 3x{ and 3x} in comments to enclose folds
" zo opens, za closes *all* under cursor, zc closes, and so on
set foldmethod=marker

" }}}
" ------ ALE ------

" lint
let g:ale_linters_explicit = 1
let b:ale_linters = ['standard']
let g:ale_javascript_standard_executable = 'semistandard'

" fix
" let g:ale_fix_on_save = 1
let g:ale_fixers = {
\   'javascript': ['prettier'],
\   'css': ['prettier'],
\}

" ------ arrow keys are banned ------

" don't use arrowkeys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" really, just don't
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
inoremap <Left>  <NOP>
inoremap <Right> <NOP>

" ------ from vim wiki ------
" http://vim.wikia.com/wiki/Example_vimrc

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on

" Enable syntax highlighting
syntax on


" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch


" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent


" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number
set relativenumber
" ahem, RELATIVE == UsEFUL

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200


" Indentation settings for using 4 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=4
set softtabstop=4
set expandtab
" ALSo maybe this for xtra convenience
set smarttab " tab to next intent

